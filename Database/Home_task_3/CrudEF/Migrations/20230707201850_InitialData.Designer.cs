// <auto-generated />
using System;
using CrudEF.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CrudEF.Migrations
{
    [DbContext(typeof(ArtisianContext))]
    [Migration("20230707201850_InitialData")]
    partial class InitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CrudEF.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("address_id_primary");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.Artisian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("artisian_id_primary");

                    b.ToTable("Artisian", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.BankDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountCurrencyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("accountCurrencyType");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("accountNumber");

                    b.Property<int>("DataArtisianId")
                        .HasColumnType("int")
                        .HasColumnName("dataArtisianId");

                    b.HasKey("Id");

                    b.HasIndex("DataArtisianId");

                    b.ToTable("BankDetail", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("category_id_primary");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.ContactArtisian", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("DataArtisianId")
                        .HasColumnType("int")
                        .HasColumnName("dataArtisianId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("contactartisian_id_primary");

                    b.HasIndex("DataArtisianId");

                    b.ToTable("ContactArtisian", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.ContactCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("contactcustomer_id_primary");

                    b.HasIndex("CustomerId");

                    b.ToTable("ContactCustomer", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("addressId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("customer_id_primary");

                    b.HasIndex("AddressId");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.CustomerDiscount", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("discount")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id")
                        .HasName("pk_CustomerDiscount");

                    b.ToTable("CustomerDiscount", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.DataArtisian", b =>
                {
                    b.Property<int>("ArtisianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("artisianId");

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("addressId");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("ArtisianId")
                        .HasName("dataartisian_id_primary");

                    b.HasIndex(new[] { "AddressId" }, "addresId")
                        .IsUnique();

                    b.ToTable("DataArtisian", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.DeliveryOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comment");

                    b.Property<int>("DeliveryAddressId")
                        .HasColumnType("int")
                        .HasColumnName("deliveryAddressId");

                    b.Property<int>("DeliveryProviderId")
                        .HasColumnType("int")
                        .HasColumnName("deliveryProviderId");

                    b.Property<int>("ShippingAddressId")
                        .HasColumnType("int")
                        .HasColumnName("shippingAddressId");

                    b.HasKey("Id")
                        .HasName("pk_DeliveryOrder");

                    b.HasIndex("DeliveryAddressId");

                    b.HasIndex("DeliveryProviderId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("DeliveryOrder", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.DeliveryProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("DeliveryProvider", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.DepartmentManufactory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("description");

                    b.Property<int>("ManufactoryId")
                        .HasColumnType("int")
                        .HasColumnName("manufactoryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("ManufactoryId");

                    b.ToTable("DepartmentManufactory", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.DepartmentProduct", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("departmentId");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.Property<int>("CountProduct")
                        .HasColumnType("int")
                        .HasColumnName("countProduct");

                    b.Property<bool>("InProduces")
                        .HasColumnType("bit")
                        .HasColumnName("inProduces");

                    b.HasKey("DepartmentId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("DepartmentProduct", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("departmentId");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("phone");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("PK_Table_1");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.ManufactoryHub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("addressId");

                    b.Property<int>("ArtisianId")
                        .HasColumnType("int")
                        .HasColumnName("artisianId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("manufactoryhub_id_primary");

                    b.HasIndex("AddressId");

                    b.HasIndex("ArtisianId");

                    b.ToTable("ManufactoryHub", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.NetworkArtisian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DataArtisianId")
                        .HasColumnType("int")
                        .HasColumnName("dataArtisianId");

                    b.Property<string>("Descriptioon")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("descriptioon");

                    b.Property<string>("SocialNetwork")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("socialNetwork");

                    b.HasKey("Id");

                    b.HasIndex("DataArtisianId");

                    b.ToTable("NetworkArtisian", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int")
                        .HasColumnName("deliveryId");

                    b.Property<string>("OrderDate")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("orderDate");

                    b.HasKey("Id")
                        .HasName("order_id_primary");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderId");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("orderitem_id_primary");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit")
                        .HasColumnName("isSuccessful");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("paymentMethodId");

                    b.Property<int>("ReceipId")
                        .HasColumnType("int")
                        .HasColumnName("receipId");

                    b.HasKey("Id")
                        .HasName("payment_id_primary");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ReceipId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("method");

                    b.HasKey("Id")
                        .HasName("paymentmethod_id_primary");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.ProductCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Availability")
                        .HasColumnType("bit")
                        .HasColumnName("availability");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("product_id_primary");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCatalog", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.ProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("beginDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8, 0)")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.HasKey("Id")
                        .HasName("pk_ProductPrice");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrice", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("AmountToPay")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("amountToPay");

                    b.Property<int>("CustomerDiscountId")
                        .HasColumnType("int")
                        .HasColumnName("customerDiscountId");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("totalAmount");

                    b.HasKey("Id")
                        .HasName("pk_Receipt");

                    b.HasIndex("CustomerDiscountId");

                    b.ToTable("Receipt", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.Rewiew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comment");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerId");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productId");

                    b.HasKey("Id")
                        .HasName("rewiew_id_primary");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Rewiew", (string)null);
                });

            modelBuilder.Entity("CrudEF.Model.BankDetail", b =>
                {
                    b.HasOne("CrudEF.Model.DataArtisian", "DataArtisian")
                        .WithMany("BankDetails")
                        .HasForeignKey("DataArtisianId")
                        .IsRequired()
                        .HasConstraintName("FK_BankDetail_DataArtisian");

                    b.Navigation("DataArtisian");
                });

            modelBuilder.Entity("CrudEF.Model.ContactArtisian", b =>
                {
                    b.HasOne("CrudEF.Model.DataArtisian", "DataArtisian")
                        .WithMany("ContactArtisians")
                        .HasForeignKey("DataArtisianId")
                        .IsRequired()
                        .HasConstraintName("FK_ContactArtisian_DataArtisian");

                    b.Navigation("DataArtisian");
                });

            modelBuilder.Entity("CrudEF.Model.ContactCustomer", b =>
                {
                    b.HasOne("CrudEF.Model.Customer", "Customer")
                        .WithMany("ContactCustomers")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("customerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CrudEF.Model.Customer", b =>
                {
                    b.HasOne("CrudEF.Model.Address", "Address")
                        .WithMany("Customers")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("customer_addressid_foreign");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("CrudEF.Model.CustomerDiscount", b =>
                {
                    b.HasOne("CrudEF.Model.Customer", "IdNavigation")
                        .WithOne("CustomerDiscount")
                        .HasForeignKey("CrudEF.Model.CustomerDiscount", "Id")
                        .IsRequired()
                        .HasConstraintName("fk_CustomerDiscount_Customer");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("CrudEF.Model.DataArtisian", b =>
                {
                    b.HasOne("CrudEF.Model.Address", "Address")
                        .WithOne("DataArtisian")
                        .HasForeignKey("CrudEF.Model.DataArtisian", "AddressId")
                        .IsRequired()
                        .HasConstraintName("FK_DataArtisian_Address");

                    b.HasOne("CrudEF.Model.Artisian", "Artisian")
                        .WithOne("DataArtisian")
                        .HasForeignKey("CrudEF.Model.DataArtisian", "ArtisianId")
                        .IsRequired()
                        .HasConstraintName("FK_DataArtisian_Artisian");

                    b.Navigation("Address");

                    b.Navigation("Artisian");
                });

            modelBuilder.Entity("CrudEF.Model.DeliveryOrder", b =>
                {
                    b.HasOne("CrudEF.Model.Address", "DeliveryAddress")
                        .WithMany("DeliveryOrderDeliveryAddresses")
                        .HasForeignKey("DeliveryAddressId")
                        .IsRequired()
                        .HasConstraintName("fk_deliveryorder_address_delivery");

                    b.HasOne("CrudEF.Model.DeliveryProvider", "DeliveryProvider")
                        .WithMany("DeliveryOrders")
                        .HasForeignKey("DeliveryProviderId")
                        .IsRequired()
                        .HasConstraintName("FK_DeliveryProvider_DeliveryOrder");

                    b.HasOne("CrudEF.Model.Address", "ShippingAddress")
                        .WithMany("DeliveryOrderShippingAddresses")
                        .HasForeignKey("ShippingAddressId")
                        .IsRequired()
                        .HasConstraintName("fk_deliveryorder_address_shipping");

                    b.Navigation("DeliveryAddress");

                    b.Navigation("DeliveryProvider");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("CrudEF.Model.DepartmentManufactory", b =>
                {
                    b.HasOne("CrudEF.Model.ManufactoryHub", "Manufactory")
                        .WithMany("DepartmentManufactories")
                        .HasForeignKey("ManufactoryId")
                        .IsRequired()
                        .HasConstraintName("FK_DepartmentManufactory_ManufactoryHub");

                    b.Navigation("Manufactory");
                });

            modelBuilder.Entity("CrudEF.Model.DepartmentProduct", b =>
                {
                    b.HasOne("CrudEF.Model.DepartmentManufactory", "Department")
                        .WithMany("DepartmentProducts")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_DepartmentProduct_DepartmentManufactory");

                    b.HasOne("CrudEF.Model.ProductCatalog", "Product")
                        .WithMany("DepartmentProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_DepartmentProduct_ProductCatalog");

                    b.Navigation("Department");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CrudEF.Model.Employee", b =>
                {
                    b.HasOne("CrudEF.Model.DepartmentManufactory", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Table_1_DepartmentManufactory");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CrudEF.Model.ManufactoryHub", b =>
                {
                    b.HasOne("CrudEF.Model.Address", "Address")
                        .WithMany("ManufactoryHubs")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("manufactoryhub_addressid_foreign");

                    b.HasOne("CrudEF.Model.Artisian", "Artisian")
                        .WithMany("ManufactoryHubs")
                        .HasForeignKey("ArtisianId")
                        .IsRequired()
                        .HasConstraintName("manufactoryhub_artisianid_foreign");

                    b.Navigation("Address");

                    b.Navigation("Artisian");
                });

            modelBuilder.Entity("CrudEF.Model.NetworkArtisian", b =>
                {
                    b.HasOne("CrudEF.Model.DataArtisian", "DataArtisian")
                        .WithMany("NetworkArtisians")
                        .HasForeignKey("DataArtisianId")
                        .IsRequired()
                        .HasConstraintName("FK_NetworkArtisian_DataArtisian");

                    b.Navigation("DataArtisian");
                });

            modelBuilder.Entity("CrudEF.Model.Order", b =>
                {
                    b.HasOne("CrudEF.Model.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("order_customerid_foreign");

                    b.HasOne("CrudEF.Model.DeliveryOrder", "Delivery")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_DeliveryOrder");

                    b.Navigation("Customer");

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("CrudEF.Model.OrderItem", b =>
                {
                    b.HasOne("CrudEF.Model.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("orderitem_orderid_foreign");

                    b.HasOne("CrudEF.Model.ProductCatalog", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItem_ProductCatalog");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CrudEF.Model.Payment", b =>
                {
                    b.HasOne("CrudEF.Model.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .IsRequired()
                        .HasConstraintName("payment_paymentmethodid_foreign");

                    b.HasOne("CrudEF.Model.Receipt", "Receip")
                        .WithMany("Payments")
                        .HasForeignKey("ReceipId")
                        .IsRequired()
                        .HasConstraintName("FK_Payment_Receip");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Receip");
                });

            modelBuilder.Entity("CrudEF.Model.ProductCatalog", b =>
                {
                    b.HasOne("CrudEF.Model.Category", "Category")
                        .WithMany("ProductCatalogs")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("product_categoryid_foreign");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CrudEF.Model.ProductPrice", b =>
                {
                    b.HasOne("CrudEF.Model.ProductCatalog", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("fk_productprice_productcatalog");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CrudEF.Model.Receipt", b =>
                {
                    b.HasOne("CrudEF.Model.CustomerDiscount", "CustomerDiscount")
                        .WithMany("Receipts")
                        .HasForeignKey("CustomerDiscountId")
                        .IsRequired()
                        .HasConstraintName("fk_Receipt_Discount");

                    b.HasOne("CrudEF.Model.Order", "IdNavigation")
                        .WithOne("Receipt")
                        .HasForeignKey("CrudEF.Model.Receipt", "Id")
                        .IsRequired()
                        .HasConstraintName("fk_Receipt_Order");

                    b.Navigation("CustomerDiscount");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("CrudEF.Model.Rewiew", b =>
                {
                    b.HasOne("CrudEF.Model.Customer", "Customer")
                        .WithMany("Rewiews")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("rewiew_customerid_foreign");

                    b.HasOne("CrudEF.Model.ProductCatalog", "Product")
                        .WithMany("Rewiews")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("rewiew_prodictid_foreign");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CrudEF.Model.Address", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("DataArtisian");

                    b.Navigation("DeliveryOrderDeliveryAddresses");

                    b.Navigation("DeliveryOrderShippingAddresses");

                    b.Navigation("ManufactoryHubs");
                });

            modelBuilder.Entity("CrudEF.Model.Artisian", b =>
                {
                    b.Navigation("DataArtisian");

                    b.Navigation("ManufactoryHubs");
                });

            modelBuilder.Entity("CrudEF.Model.Category", b =>
                {
                    b.Navigation("ProductCatalogs");
                });

            modelBuilder.Entity("CrudEF.Model.Customer", b =>
                {
                    b.Navigation("ContactCustomers");

                    b.Navigation("CustomerDiscount");

                    b.Navigation("Orders");

                    b.Navigation("Rewiews");
                });

            modelBuilder.Entity("CrudEF.Model.CustomerDiscount", b =>
                {
                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("CrudEF.Model.DataArtisian", b =>
                {
                    b.Navigation("BankDetails");

                    b.Navigation("ContactArtisians");

                    b.Navigation("NetworkArtisians");
                });

            modelBuilder.Entity("CrudEF.Model.DeliveryOrder", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CrudEF.Model.DeliveryProvider", b =>
                {
                    b.Navigation("DeliveryOrders");
                });

            modelBuilder.Entity("CrudEF.Model.DepartmentManufactory", b =>
                {
                    b.Navigation("DepartmentProducts");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("CrudEF.Model.ManufactoryHub", b =>
                {
                    b.Navigation("DepartmentManufactories");
                });

            modelBuilder.Entity("CrudEF.Model.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("CrudEF.Model.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("CrudEF.Model.ProductCatalog", b =>
                {
                    b.Navigation("DepartmentProducts");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductPrices");

                    b.Navigation("Rewiews");
                });

            modelBuilder.Entity("CrudEF.Model.Receipt", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
